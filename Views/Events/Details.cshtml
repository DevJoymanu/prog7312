@model prog7312_st10161149_part1.Models.Event
@{
    ViewData["Title"] = "Event Details";
    var isPast = Model.EventDate < DateTime.Now;
    var isToday = Model.EventDate.Date == DateTime.Now.Date;
}

<div class="details-container">
    <div class="details-header">
        <a asp-action="Index" class="back-button">← Back to Events</a>
        <h1 class="details-title">📅 Event Details</h1>
    </div>

    <div class="details-card">
        <div class="details-status-bar">
            <div class="event-category-badge">
                @{
                    var categoryDisplay = prog7312_st10161149_part1.Models.EventCategories.Categories.ContainsKey(Model.Category)
                    ? prog7312_st10161149_part1.Models.EventCategories.Categories[Model.Category]
                    : Model.Category;
                }
                @categoryDisplay
            </div>
            @if (isToday)
            {
                <div class="status-badge badge-today">📍 HAPPENING TODAY</div>
            }
            else if (isPast)
            {
                <div class="status-badge badge-past">📝 PAST EVENT</div>
            }
            else
            {
                <div class="status-badge badge-upcoming">⏰ UPCOMING</div>
            }
        </div>

        <h2 class="event-main-title">@Model.Title</h2>

        <div class="event-meta-grid">
            <div class="meta-item">
                <div class="meta-icon">📅</div>
                <div class="meta-content">
                    <span class="meta-label">Date</span>
                    <span class="meta-value">@Model.EventDate.ToString("dddd, MMMM dd, yyyy")</span>
                </div>
            </div>

            <div class="meta-item">
                <div class="meta-icon">🕐</div>
                <div class="meta-content">
                    <span class="meta-label">Time</span>
                    <span class="meta-value">@Model.EventDate.ToString("h:mm tt")</span>
                </div>
            </div>

            @if (!string.IsNullOrEmpty(Model.Location))
            {
                <div class="meta-item full-width">
                    <div class="meta-icon">📍</div>
                    <div class="meta-content">
                        <span class="meta-label">Location</span>
                        <span class="meta-value">@Model.Location</span>
                    </div>
                </div>
            }

            @if (!string.IsNullOrEmpty(Model.OrganizerName))
            {
                <div class="meta-item">
                    <div class="meta-icon">👤</div>
                    <div class="meta-content">
                        <span class="meta-label">Organizer</span>
                        <span class="meta-value">@Model.OrganizerName</span>
                    </div>
                </div>
            }

            @if (!string.IsNullOrEmpty(Model.ContactEmail))
            {
                <div class="meta-item">
                    <div class="meta-icon">📧</div>
                    <div class="meta-content">
                        <span class="meta-label">Contact</span>
                        <a href="mailto:@Model.ContactEmail" class="meta-value email-link">@Model.ContactEmail</a>
                    </div>
                </div>
            }

            <div class="meta-item">
                <div class="meta-icon">👁️</div>
                <div class="meta-content">
                    <span class="meta-label">Views</span>
                    <span class="meta-value">@Model.ViewCount</span>
                </div>
            </div>

            <div class="meta-item">
                <div class="meta-icon">📝</div>
                <div class="meta-content">
                    <span class="meta-label">Posted</span>
                    <span class="meta-value">@Model.CreatedAt.ToString("MMM dd, yyyy")</span>
                </div>
            </div>
        </div>

        <div class="description-section">
            <h3 class="section-title">📋 Description</h3>
            <div class="description-content">
                @Model.Description
            </div>
        </div>

        <div class="actions-section">
            <a asp-action="Edit" asp-route-id="@Model.Id" class="btn btn-primary">✏️ Edit Event</a>
            <a asp-action="Delete" asp-route-id="@Model.Id" class="btn btn-danger">🗑️ Delete Event</a>
            <a asp-action="Index" class="btn btn-secondary">📋 Back to List</a>
        </div>
    </div>

    @if (ViewBag.RecommendedEvents != null && ((List<Event>)ViewBag.RecommendedEvents).Any())
    {
        <div class="recommendations-section">
            <h3 class="section-title">💡 You Might Also Be Interested In</h3>
            <div class="recommendations-grid">
                @foreach (var evt in (List<Event>)ViewBag.RecommendedEvents)
                {
                    <a asp-action="Details" asp-route-id="@evt.Id" class="recommendation-card">
                        <div class="rec-category">
                            @{
                                var recCategoryDisplay = prog7312_st10161149_part1.Models.EventCategories.Categories.ContainsKey(evt.Category)
                                ? prog7312_st10161149_part1.Models.EventCategories.Categories[evt.Category]
                                : evt.Category;
                            }
                            @recCategoryDisplay
                        </div>
                        <h4 class="rec-title">@evt.Title</h4>
                        <div class="rec-date">📅 @evt.EventDate.ToString("MMM dd, yyyy")</div>
                    </a>
                }
            </div>
        </div>
    }
</div>

<style>
    .details-container {
        max-width: 900px;
        margin: 0 auto;
    }

    .details-card {
        background: var(--glass-bg);
        border: 1px solid var(--glass-border);
        backdrop-filter: blur(20px);
        border-radius: 20px;
        padding: 2.5rem;
        margin-bottom: 2rem;
    }

    .details-status-bar {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 2rem;
        padding-bottom: 1rem;
        border-bottom: 1px solid var(--border-color);
        flex-wrap: wrap;
        gap: 1rem;
    }

    .event-category-badge {
        padding: 0.5rem 1rem;
        background: rgba(99,102,241,0.2);
        border: 1px solid rgba(99,102,241,0.3);
        border-radius: 25px;
        font-size: 0.875rem;
        font-weight: 600;
        color: var(--accent-primary);
    }

    .status-badge {
        padding: 0.5rem 1rem;
        border-radius: 25px;
        font-size: 0.875rem;
        font-weight: 600;
        text-transform: uppercase;
    }

    .event-main-title {
        font-size: 2rem;
        font-weight: 700;
        color: var(--text-primary);
        margin-bottom: 2rem;
        line-height: 1.3;
    }

    .event-meta-grid {
        display: grid;
        grid-template-columns: repeat(2, 1fr);
        gap: 1.5rem;
        margin-bottom: 2rem;
    }

    .meta-item {
        display: flex;
        align-items: flex-start;
        gap: 1rem;
        padding: 1rem;
        background: rgba(255,255,255,0.02);
        border: 1px solid var(--border-color);
        border-radius: 12px;
    }

        .meta-item.full-width {
            grid-column: 1 / -1;
        }

    .meta-icon {
        font-size: 1.5rem;
        opacity: 0.8;
    }

    .meta-content {
        display: flex;
        flex-direction: column;
        gap: 0.25rem;
        flex: 1;
    }

    .meta-label {
        font-size: 0.875rem;
        color: var(--text-muted);
        text-transform: uppercase;
        letter-spacing: 0.5px;
    }

    .meta-value {
        font-size: 1rem;
        color: var(--text-primary);
        font-weight: 500;
    }

    .email-link {
        color: var(--accent-primary);
        text-decoration: none;
    }

        .email-link:hover {
            text-decoration: underline;
        }

    .description-section {
        margin-bottom: 2rem;
    }

    .section-title {
        font-size: 1.25rem;
        font-weight: 600;
        color: var(--text-primary);
        margin-bottom: 1rem;
    }

    .description-content {
        background: rgba(255,255,255,0.02);
        border: 1px solid var(--border-color);
        border-radius: 12px;
        padding: 1.5rem;
        color: var(--text-secondary);
        line-height: 1.8;
        white-space: pre-wrap;
    }

    .recommendations-section {
        background: var(--glass-bg);
        border: 1px solid var(--glass-border);
        backdrop-filter: blur(20px);
        border-radius: 20px;
        padding: 2rem;
    }

    .recommendations-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 1rem;
    }

    .recommendation-card {
        padding: 1.5rem;
        background: rgba(255,255,255,0.03);
        border: 1px solid var(--border-color);
        border-radius: 12px;
        text-decoration: none;
        transition: all 0.3s ease;
    }

        .recommendation-card:hover {
            background: rgba(255,255,255,0.08);
            transform: translateY(-4px);
            box-shadow: 0 10px 20px rgba(99,102,241,0.1);
        }

    .rec-category {
        font-size: 0.75rem;
        color: var(--accent-primary);
        font-weight: 500;
        margin-bottom: 0.5rem;
    }

    .rec-title {
        font-size: 1rem;
        font-weight: 600;
        color: var(--text-primary);
        margin-bottom: 0.5rem;
        line-height: 1.4;
    }

    .rec-date {
        font-size: 0.875rem;
        color: var(--text-muted);
    }

    media (max-width: 768px) {
        .details-card

    {
        padding: 1.5rem;
    }

    .event-meta-grid {
        grid-template-columns: 1fr;
    }

    .event-main-title {
        font-size: 1.5rem;
    }

    .actions-section {
        flex-direction: column;
    }

    }
</style>